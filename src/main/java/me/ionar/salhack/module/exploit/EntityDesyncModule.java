package me.ionar.salhack.module.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketMoveVehicle;
import net.minecraft.network.play.server.SPacketSetPassengers;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.event.world.ChunkEvent;
import net.minecraftforge.event.world.WorldEvent;

import java.util.Random;

import me.ionar.salhack.events.network.EventNetworkPacketEvent;
import me.ionar.salhack.events.player.EventPlayerUpdate;
import me.ionar.salhack.module.Module;
import me.ionar.salhack.util.MathUtil;
import me.ionar.salhack.util.Timer;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;

public final class EntityDesyncModule extends Module
{
    public EntityDesyncModule()
    {
        super("EntityDesync", new String[]
        { "ED" }, "Clientside dismount from entity", "NONE", 0xDBAB24, ModuleType.EXPLOIT);
    }

    private Entity Riding = null;
    private Vec3d StartPosition = Vec3d.ZERO;
    private Timer timer = new Timer();
    private boolean Flag = true;
    
    @Override
    public void toggleNoSave()
    {
        
    }

    @Override
    public void onEnable()
    {
        super.onEnable();

        if (mc.player == null)
        {
            Riding = null;
            toggle();
            return;
        }

        if (!mc.player.isRiding())
        {
            SendMessage("You are not riding an entity.");
            Riding = null;
            toggle();
            return;
        }

        Riding = mc.player.getRidingEntity();

        mc.player.dismountRidingEntity();
        mc.world.removeEntity(Riding);
        StartPosition = Riding.getPositionVector();
        timer.reset();
    }

    @Override
    public void onDisable()
    {
        super.onDisable();

        if (Riding != null)
        {
            Riding.isDead = false;
            mc.world.spawnEntity(Riding);
            mc.player.startRiding(Riding, true);
            Riding = null;
            SendMessage("Forced a remount.");
        }
    }

    @EventHandler
    private Listener<EventPlayerUpdate> OnUpdate = new Listener<>(p_Event ->
    {
        /// We must be riding to send these packets.
        if (Riding == null)
            return;

        if (mc.player.isRiding())
            return;
        
        if (timer.passed(1500))
        {
            Riding.setPosition(mc.player.posX, StartPosition.y, mc.player.posZ);
            mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
        //    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, true));
        }
        /*else
        {
            if (StartPosition != Vec3d.ZERO)
            {
                Random l_Random = new Random(3);
                
                Riding.setPosition(StartPosition.x+l_Random.nextDouble(), StartPosition.y, StartPosition.z);
                mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
            }
        }*/
    });
    
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent = new Listener<>(p_Event ->
    {
        if (p_Event.getPacket() instanceof SPacketSetPassengers)
        {
            SPacketSetPassengers l_Packet = (SPacketSetPassengers) p_Event.getPacket();

            if (l_Packet.getEntityId() != Riding.getEntityId())
                return;

            Riding.isDead = false;
            mc.world.spawnEntity(Riding);
            mc.player.startRiding(Riding, true);
            Riding = null;
            toggle();
            SendMessage("SPacketSetPassengers - null");
        }
        else if (p_Event.getPacket() instanceof SPacketDestroyEntities)
        {
            SPacketDestroyEntities l_Packet = (SPacketDestroyEntities) p_Event.getPacket();

            for (int l_EntityId : l_Packet.getEntityIDs())
            {
                if (l_EntityId == Riding.getEntityId())
                {
                    Riding = null;
                    SendMessage("Entity is now null SPacketDestroyEntities");
                    break;
                }
            }
        }
        
        else if (p_Event.getPacket() instanceof SPacketMoveVehicle)
        {
            SPacketMoveVehicle l_Packet = (SPacketMoveVehicle)p_Event.getPacket();
            p_Event.cancel();
            
            SendMessage(String.format("Recieved SPacketMoveVehicle with data %s %s %s", Math.floor(l_Packet.getX()), Math.floor(l_Packet.getY()), Math.floor(l_Packet.getZ())));
            
           // timer.reset();
            
           // timer.resetTimeSkipTo(1000);
            StartPosition = new Vec3d(l_Packet.getX(), l_Packet.getY(), l_Packet.getZ());

            if (Flag)
            {
                Riding.setPosition(StartPosition.x, StartPosition.y, StartPosition.z);
                mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
                mc.player.connection.sendPacket(new CPacketPlayer.Position(l_Packet.getX(), l_Packet.getY(), l_Packet.getZ(), true));
            }
            else
            {
                final Vec3d l_Direction = MathUtil.direction(mc.player.rotationYaw);
                
                if (l_Direction != null)
                {
                    Riding.setPosition(mc.player.posX + l_Direction.x*75, mc.player.posY, mc.player.posZ + l_Direction.z*75);

                    mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
                }
            }

            Flag = !Flag;
        }
    });
    
    @EventHandler
    private Listener<EntityJoinWorldEvent> OnWorldEvent = new Listener<>(p_Event ->
    {
        if (p_Event.getEntity() == mc.player)
        {
            Riding = null;
            toggle();
        }
    });
    
    @EventHandler
    private Listener<ChunkEvent.Load> OnChunkEventLoad = new Listener<>(p_Event ->
    {
        //StartPosition = Vec3d.ZERO;
        //SendMessage("ChunkEventLoad!");
    });
}
